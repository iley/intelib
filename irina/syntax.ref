* INTELIB_CONTRIBUTED
* Written by Igor Bronstein (<igor.bronstein_AT_intelib.org>)

$EXTERN Brackets;
$EXTERN GetExternType;
$EXTERN GetEntryType;
$EXTERN GetSymbolType;
$EXTERN GetDelimType;
$EXTERN GetDirectType;
$EXTERN GetTextConstantType;
$EXTERN GetNumberType;
$EXTERN GetDelimCode;
$EXTERN GetVarType;
$EXTERN Reverse;
$EXTERN Reverse2;
$EXTERN AddError;
$EXTERN LastLine;
$EXTERN GetLibraryFuns;
$EXTERN CheckSyntax;
$EXTERN RemoveSC;
$EXTERN Unimplemented;
$EXTERN SyntaxDirectives;

$ENTRY Syntax {
  (t.FileName t.ErrorsList e.FileCont) =
	<SyntaxMain (t.FileName <Brackets t.ErrorsList e.FileCont>)>;
  () = ();
  e.Foo = <Prout 'Bug in "Syntax" function. View field: ' e.Foo>;
}

SyntaxMain {
  (t.FileName t.ErrorsList e.FileCont),
	<RemoveSC e.FileCont> : e.NewFileCont =
	<CheckSyntax
		(t.FileName
		<StartSyntax
			<Reverse2 
				<GatherExtern t.ErrorsList (ExternFuns '=' (<GetLibraryFuns>)) e.NewFileCont>
			>
		>
		e.NewFileCont
		)
	>;
  e.Foo = <Prout 'Bug in "SyntaxMain" function. View field: ' e.Foo>;
}

GatherExtern {
  t.ErrorsList t.Extern (s.LineNumber0 s.ExternType) (s.LineNumber1 s.SymbolType e.Symbol)
  (s.LineNumber2 s.DelimType Semicolon) e.Text,
	<GetExternType> : s.ExternType,
	<GetSymbolType> : s.SymbolType =
	(s.LineNumber0 s.ExternType) (s.LineNumber1 s.SymbolType e.Symbol)
  	(s.LineNumber2 s.DelimType Semicolon)
	<GatherExtern	
		<AddExtern t.ErrorsList t.Extern (s.LineNumber2 s.SymbolType e.Symbol)>
		e.Text
	>;
  t.ErrorsList t.Extern (s.LineNumber0 s.EntryType) (s.LineNumber1 s.SymbolType e.Symbol)
  ((s.LineNumber2 s.DelimType s.LCBracket) e.FunCont (s.LineNumber3 s.DelimType s.RCBracket)) e.Text,
	<GetSymbolType> : s.SymbolType,
	<GetEntryType> : s.EntryType,
	<GetDelimCode '{'> : s.LCBracket,
	<GetDelimCode '}'> : s.RCBracket =
	(s.LineNumber0 s.EntryType) (s.LineNumber1 s.SymbolType e.Symbol)
  	((s.LineNumber2 s.DelimType s.LCBracket) e.FunCont (s.LineNumber3 s.DelimType s.RCBracket))
	<GatherExtern	
		<AddExtern t.ErrorsList t.Extern (s.LineNumber1 s.SymbolType e.Symbol)>
		e.Text
	>;


  t.ErrorsList t.Extern (s.LineNumber0 s.DirectivesType)
  ((s.LineNumber1 s.DelimType s.LCBracket) e.Foo (s.LineNumber2 s.DelimType s.RCBracket))
  e.Text,
	<GetDirectType> : s.DirectivesType,
	<GetDelimCode '{'> : s.LCBracket,
	<GetDelimCode '}'> : s.RCBracket =
	(s.LineNumber0 s.DirectivesType)
	((s.LineNumber1 s.DelimType s.LCBracket) e.Foo (s.LineNumber2 s.DelimType s.RCBracket))
	<GatherExtern t.ErrorsList t.Extern e.Text>;


  t.ErrorsList t.Extern (s.LineNumber1 s.SymbolType e.Symbol)
  ((s.LineNumber2 s.DelimType s.LCBracket) e.FunCont (s.LineNumber3 s.DelimType s.RCBracket)) e.Text,
	<GetSymbolType> : s.SymbolType,
	<GetDelimCode '{'> : s.LCBracket,
	<GetDelimCode '}'> : s.RCBracket =
	(s.LineNumber1 s.SymbolType e.Symbol)
  	((s.LineNumber2 s.DelimType s.LCBracket) e.FunCont (s.LineNumber3 s.DelimType s.RCBracket))
	<GatherExtern	
		<AddExtern t.ErrorsList t.Extern (s.LineNumber1 s.SymbolType e.Symbol)>
		e.Text
	>;
  t.ErrorsList t.Extern t.Term e.Text =
	t.Term <GatherExtern t.ErrorsList t.Extern e.Text>;
  t.ErrorsList t.Extern = t.ErrorsList t.Extern;
  e.Foo = <Prout 'Bug in "GatherExtern" function. View field: ' e.Foo>;
}

AddExtern {
  t.ErrorsList (ExternFuns '=' (e.Foo (s.LineNumber1 e.Symbol) e.Bar)) (s.LineNumber2 s.SymbolType e.Symbol) =
	<AddError t.ErrorsList (s.LineNumber2 IrinaError_Redefinition e.Symbol)>
	(ExternFuns '=' (e.Foo (s.LineNumber1 e.Symbol) e.Bar));
  t.ErrorsList (ExternFuns '=' (e.ExternFuns)) (s.LineNumber s.SymbolType e.Symbol) =
	t.ErrorsList (ExternFuns '=' (e.ExternFuns (s.LineNumber e.Symbol)));
  e.Foo = <Prout 'Bug in "AddExtern" function. View field: ' e.Foo>;
}

StartSyntax {
  t.ErrorsList t.Extern (s.LineNumber0 s.ExternType) (s.LineNumber1 s.SymbolType e.Symbol)
  (s.LineNumber2 s.DelimType Semicolon) e.Text,
	<GetExternType> : s.ExternType,
	<GetSymbolType> : s.SymbolType =
	<StartSyntax t.ErrorsList t.Extern e.Text>;

  t.ErrorsList t.Extern (s.LineNumber0 s.EntryType) (s.LineNumber1 s.SymbolType e.Ident)
  ((s.LineNumber2 s.DelimType s.LCBracket) e.FunCont (s.LineNumber3 s.DelimType s.RCBracket)) e.Text,
	<GetSymbolType> : s.SymbolType,
	<GetEntryType> : s.EntryType,
	<GetDelimCode '{'> : s.LCBracket,
	<GetDelimCode '}'> : s.RCBracket =
	<StartSyntax
		<SyntaxFunCont
			t.ErrorsList t.Extern
			(s.LineNumber1 e.Ident) ()
			e.FunCont
		>
		t.Extern
		e.Text
	>;


  t.ErrorsList t.Extern (s.LineNumber0 s.DirectivesType)
  ((s.LineNumber1 s.DelimType s.LCBracket) e.Foo (s.LineNumber2 s.DelimType s.RCBracket))
  e.Text,
	<GetDirectType> : s.DirectivesType,
	<GetDelimCode '{'> : s.LCBracket,
	<GetDelimCode '}'> : s.RCBracket =
	<StartSyntax <SyntaxDirectives t.ErrorsList e.Foo> t.Extern e.Text>;


  t.ErrorsList t.Extern (s.LineNumber1 s.SymbolType e.Ident)
  ((s.LineNumber2 s.DelimType s.LCBracket) e.FunCont (s.LineNumber3 s.DelimType s.RCBracket)) e.Text,
	<GetSymbolType> : s.SymbolType,
	<GetDelimCode '{'> : s.LCBracket,
	<GetDelimCode '}'> : s.RCBracket =
	<StartSyntax
		<SyntaxFunCont
			t.ErrorsList t.Extern
			(s.LineNumber1 e.Ident) ()
			e.FunCont
		>
		t.Extern
		e.Text
	>;

  t.ErrorsList t.Extern = t.ErrorsList;

  t.ErrorsList t.Extern (s.LineNumber s.Type e.Foo) e.Text =
	<StartSyntax <AddError t.ErrorsList (s.LineNumber IrinaError_IllegalExpr e.Foo)> t.Extern e.Text>;

  t.ErrorsList t.Extern ((s.LineNumber1 s.DelimType s.LBracket) e.Foo (s.LineNumber2 s.DelimType s.RBracket)) e.Text,
	<GetDelimType> : s.DelimType =
	<StartSyntax
		<StartSyntax
			<AddError t.ErrorsList (s.LineNumber1 IrinaError_IllegalExpr s.LBracket)>
			t.Extern
			e.Foo
		>
		t.Extern
		e.Text
	>;

  e.Foo = <Prout 'Bug in "StartSyntax" function. View field: ' e.Foo>;
}

SyntaxFunCont {
  t.ErrorsList t.Extern (s.LineNumber e.FunName) t.Vars =
	<AddError t.ErrorsList (s.LineNumber IrinaError_EmptyFun e.FunName)>;
  t.ErrorsList t.Extern t.FunName t.Vars e.Body =
	<StartFun t.ErrorsList t.Extern t.FunName t.Vars e.Body>;
  e.Foo = <Prout 'Bug in "SyntaxFunCont" function. View field: ' e.Foo>;
}

StartFun {
  t.ErrorsList t.Extern t.FunName t.Vars e.Clause (t.LineNumber s.DelimType Semicolon) e.Text =
	<StartFun
		<SyntaxOneClause t.ErrorsList t.Extern t.FunName t.Vars e.Clause (t.LineNumber <GetDelimType> Semicolon)>
		t.Extern t.FunName t.Vars e.Text
	>;
  t.ErrorsList t.Extern t.FunName t.Vars = t.ErrorsList;
  t.ErrorsList t.Extern t.FunName t.Vars e.Text =
	<SyntaxOneClause t.ErrorsList t.Extern t.FunName t.Vars e.Text (<LastLine e.Text> <GetDelimType> Semicolon)>;
  e.Foo = <Prout 'Bug in "StartFun" function. View field: ' e.Foo>;
}

SyntaxOneClause {
  t.ErrorsList t.Extern t.FunName t.Vars
  e.Left (s.LineNumber1 s.DelimType Comma) e.Where (s.LineNumber2 s.DelimType Equal) e.Right
  (s.LineNumber3 s.DelimType Semicolon) =
	<GetFirstTerm
		<SyntaxRightPart
			<SyntaxWherePart
				<SyntaxLeftPart t.ErrorsList t.Extern t.FunName t.Vars e.Left>
				(s.LineNumber1 s.DelimType Comma)
				e.Where
			>
			e.Right
		>
	>;

  t.ErrorsList t.Extern t.FunName t.Vars
  e.Left (s.LineNumber1 s.DelimType Equal) e.Right (s.LineNumber2 s.DelimType Semicolon) =
	<GetFirstTerm <SyntaxRightPart <SyntaxLeftPart t.ErrorsList t.Extern t.FunName t.Vars e.Left> e.Right>>;

  t.ErrorsList t.Extern t.FunName t.Vars
  e.Left (s.LineNumber1 s.DelimType Comma) e.Where (s.LineNumber2 s.DelimType Colon)
  ((s.LineNumber3 s.DelimType s.LCBracket) e.FunCont (s.LineNumber4 s.DelimType s.RCBracket))
  (s.LineNumber5 s.DelimType Semicolon),
	<GetDelimType> : s.DelimType,
	<GetDelimCode '{'> : s.LCBracket,
	<GetDelimCode '}'> : s.RCBracket =
	<SyntaxFunCont
		<SyntaxWherePart
			<SyntaxLeftPart t.ErrorsList t.Extern t.FunName t.Vars e.Left>
			(s.LineNumber1 <GetDelimType> Comma) e.Where (s.LineNumber2 <GetDelimType> Colon)
		> 
	e.FunCont>;

  t.ErrorsList t.Extern t.FunName t.Vars e.Text (s.LineNumber s.DelimType Semicolon) =
	<SyntaxOneClause
		<AddError t.ErrorsList (s.LineNumber IrinaError_MatchMissing)>
		t.Extern t.FunName t.Vars e.Text
		(s.LineNumber <GetDelimType> Equal) (s.LineNumber <GetDelimType> Semicolon)
	>;

  e.Foo = <Prout 'Bug in "SyntaxOneClause" function. View field: ' e.Foo>;
}

SyntaxWherePart {
  t.ErrorsList t.Extern t.FunName t.Vars
  (s.LineNumber1 s.DelimType Comma) e.RightWhere (s.LineNumber2 s.DelimType Colon) e.LeftWhere
  (s.LineNumber3 s.DelimType Comma) e.RestWhere =
	<SyntaxWherePart
		<SyntaxLeftPart
			<SyntaxRightPart t.ErrorsList t.Extern t.FunName t.Vars e.RightWhere>
			e.LeftWhere
		>
		(s.LineNumber3 <GetDelimType> Comma) 
		e.RestWhere
	>;

  t.ErrorsList t.Extern t.FunName t.Vars
  (s.LineNumber1 s.DelimType Comma) e.RightWhere (s.LineNumber2 s.DelimType Colon) e.LeftWhere =
	<SyntaxLeftPart <SyntaxRightPart t.ErrorsList t.Extern t.FunName t.Vars e.RightWhere> e.LeftWhere>;

  t.ErrorsList t.Extern t.FunName t.Vars (s.LineNumber1 s.DelimType Comma) e.Text =
	<SyntaxWherePart
		<AddError t.ErrorsList (s.LineNumber1 IrinaError_ColonMissing)>
		t.Extern t.FunName t.Vars
		(s.LineNumber1 <GetDelimType> Comma)
		(s.LineNumber1 <GetDelimType> Colon) e.Text
	>;

  e.Foo = <Prout 'Bug in "SyntaxWherePart" function. View field: ' e.Foo>;
}

AddVar {
  (e.Foo (e.Var) e.Bar) (e.Var) = (e.Foo (e.Var) e.Bar);
  (e.Vars) (e.Var) = (e.Vars (e.Var));
  e.Foo = <Prout 'Bug in "AddVar" function. View field: ' e.Foo>;
}

IsStandard {
  e.Text, ('s')('e')('t') : e.Foo e.Text e.Bar = True;
  e.Foo = False;
}

SyntaxLeftPart {
  t.ErrorsList t.Extern t.FunName t.Vars
  (s.LineNumber s.VarType e.Prefix '.' e.Suffix) e.Text,
	<GetVarType> : s.VarType,
	<IsStandard (e.Prefix)> : False =
	<SyntaxLeftPart
		<AddError
			t.ErrorsList
			(s.LineNumber IrinaError_NonStandardPrefix e.Prefix)
		>
		t.Extern t.FunName <AddVar t.Vars (e.Prefix '.' e.Suffix)>
		e.Text
	>;

  t.ErrorsList t.Extern t.FunName t.Vars
  (s.LineNumber1 s.VarType e.Var) e.Text,
	<GetVarType> : s.VarType = 
	<SyntaxLeftPart t.ErrorsList t.Extern t.FunName <AddVar t.Vars (e.Var)> e.Text>;

  t.ErrorsList t.Extern t.FunName t.Vars
  (s.LineNumber1 s.Type e.Ident) e.Text,
	<IsSymbolOrConstant s.Type> : True = 
	<SyntaxLeftPart t.ErrorsList t.Extern t.FunName t.Vars e.Text>;

  t.ErrorsList t.Extern t.FunName t.Vars
  ((s.LineNumber1 s.DelimType s.LBracket) e.Foo (s.LineNumber2 s.DelimType s.RBracket)) e.Text,
	<GetDelimType> : s.DelimType,
	<GetDelimCode '('> : s.LBracket,
	<GetDelimCode ')'> : s.RBracket =
	<SyntaxLeftPart <SyntaxLeftPart t.ErrorsList t.Extern t.FunName t.Vars e.Foo> e.Text>;

  t.ErrorsList t.Extern t.FunName t.Vars (s.LineNumber s.Type e.Foo) e.Text =
	<SyntaxLeftPart
		<AddError t.ErrorsList (s.LineNumber IrinaError_IllegalExpr e.Foo)>
		t.Extern t.FunName t.Vars
		e.Text
	>;

  t.ErrorsList t.Extern t.FunName t.Vars
  ((t.LineNumber1 s.DelimType s.LBracket) e.Foo (t.LineNumber2 s.DelimType s.RBracket)) e.Text,
	<GetDelimType> : s.DelimType = 
	<SyntaxLeftPart
		<SyntaxLeftPart
			<AddError t.ErrorsList (t.LineNumber1 IrinaError_IllegalExpr s.LBracket)>
			t.Extern t.FunName t.Vars
			e.Foo
		>
		e.Text
	>;

  t.ErrorsList t.Extern t.FunName t.Vars = t.ErrorsList t.Extern t.FunName t.Vars;

  e.Foo = <Prout 'Bug in "SyntaxLeftPart" function. View field: ' e.Foo>;
}

SyntaxRightPart {
  t.ErrorsList t.Extern t.FunName t.Vars
  (s.LineNumber1 s.VarType e.Var) e.Text,
	<GetVarType> : s.VarType = 
	<SyntaxRightPart <CheckVar t.ErrorsList t.Vars (s.LineNumber1 e.Var)> t.Extern t.FunName t.Vars e.Text>;

  t.ErrorsList t.Extern t.FunName t.Vars
  (s.LineNumber1 s.Type e.Ident) e.Text,
	<IsSymbolOrConstant s.Type> : True = 
	<SyntaxRightPart t.ErrorsList t.Extern t.FunName t.Vars e.Text>;

  t.ErrorsList t.Extern t.FunName t.Vars
  ((s.LineNumber1 s.DelimType s.LBracket) e.Foo (s.LineNumber2 s.DelimType s.RBracket)) e.Text,
	<GetDelimType> : s.DelimType,
	<GetDelimCode '('> : s.LBracket,
	<GetDelimCode ')'> : s.RBracket =
	<SyntaxRightPart <SyntaxRightPart t.ErrorsList t.Extern t.FunName t.Vars e.Foo> e.Text>;

  t.ErrorsList t.Extern t.FunName t.Vars
  ((s.LineNumber1 s.DelimType s.LFBracket) (s.LineNumberF s.SymbolType e.FunName) e.FunParams
  (s.LineNumber2 s.DelimType s.RFBracket)) e.Text,
	<GetDelimType> : s.DelimType,
	<GetSymbolType> : s.SymbolType,
	<GetDelimCode '<'> : s.LFBracket,
	<GetDelimCode '>'> : s.RFBracket =
	<SyntaxRightPart
		<SyntaxRightPart
			<CheckCalledFun t.ErrorsList t.Extern (s.LineNumberF e.FunName)>
			t.Extern t.FunName t.Vars e.FunParams
		>
		e.Text
	>;

  t.ErrorsList t.Extern t.FunName t.Vars (s.LineNumber s.Type e.Foo) e.Text =
	<SyntaxRightPart
		<AddError t.ErrorsList (s.LineNumber IrinaError_IllegalExpr e.Foo)>
		t.Extern t.FunName t.Vars e.Text
	>;

  t.ErrorsList t.Extern t.FunName t.Vars
  ((s.LineNumber1 s.DelimType s.LFBracket) e.Foo (s.LineNumber2 s.DelimType s.RFBracket)) e.Text,
	<GetDelimType> : s.DelimType,
	<GetDelimCode '<'> : s.LFBracket,
	<GetDelimCode '>'> : s.RFBracket =
	<SyntaxRightPart
		<SyntaxRightPart
			<AddError t.ErrorsList (s.LineNumber1 IrinaError_BadFuncall)>
			t.Extern t.FunName t.Vars e.Foo
		>
		e.Text
	>;

  t.ErrorsList t.Extern t.FunName t.Vars
  ((s.LineNumber1 s.DelimType s.LCBracket) e.Foo (s.LineNumber2 s.DelimType s.RCBracket)) e.Text,
	<GetDelimType> : s.DelimType,
	<GetDelimCode '{'> : s.LCBracket,
	<GetDelimCode '}'> : s.RCBracket = 
	<SyntaxRightPart
		<SyntaxRightPart
			<AddError t.ErrorsList (s.LineNumber1 IrinaError_IllegalExpr s.LCBracket)>
			t.Extern t.FunName t.Vars e.Foo
		>
		e.Text
	>;

  t.ErrorsList t.Extern t.FunName t.Vars = t.ErrorsList t.Extern t.FunName t.Vars;

  e.Foo = <Prout 'Bug in "SyntaxRightPart" function. View field: ' e.Foo>;
}

GetFirstTerm {
  t.1 t.2 t.3 t.4 = t.1;
  e.Foo = <Prout 'Bug in "GetFirstTerm" function. View field: ' e.Foo>;
}

IsSymbolOrConstant {
  s.Type, <GetSymbolType> <GetTextConstantType> <GetNumberType> : e.Foo s.Type e.Bar = True;
  e.Foo = False;
}

CheckCalledFun {
  t.ErrorsList (ExternFuns '=' (e.Foo (s.LineNumber1 e.FunName) e.Bar)) (s.LineNumber2 e.FunName) = t.ErrorsList;
  t.ErrorsList t.Extern (s.LineNumber e.FunName),
	<Unimplemented> : e.Foo (e.FunName) e.Bar =
	<AddError t.ErrorsList (s.LineNumber IrinaError_UnimplementedLibFun e.FunName)>;
  t.ErrorsList t.Extern (s.LineNumber e.FunName) =
	<AddError t.ErrorsList (s.LineNumber IrinaError_UndefinedFun e.FunName)>;
  e.Foo = <Prout 'Bug in "CheckCalledFun" function. View field: ' e.Foo>;
}

CheckVar {
  t.ErrorsList (e.Foo (e.Var) e.Bar) (s.LineNumber e.Var) = t.ErrorsList;
  t.ErrorsList t.Vars (s.LineNumber e.Var) =
	<AddError t.ErrorsList (s.LineNumber IrinaError_UndefinedVar e.Var)>;
  e.Foo = <Prout 'Bug in "CheckVar" function. View field: ' e.Foo>;
}
