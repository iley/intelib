* INTELIB_CONTRIBUTED
* Written by Igor Bronstein (<igor.bronstein_AT_gmail.com>)

$EXTERN CheckLexical;
$EXTERN AddError;
$EXTERN GetEntryType;
$EXTERN GetExternType;
$EXTERN GetDirectType;
$EXTERN GetDelimType;
$EXTERN GetTextConstantType;
$EXTERN GetSymbolType;
$EXTERN GetNumberType;
$EXTERN GetVarType;
$EXTERN GetDelimCode;

$ENTRY Lexical {
  (t.FileName e.FileCont) = <CheckLexical (t.FileName <StateS <FirstLineNumber> (ErrorsList '=' ()) e.FileCont>)>;
  e.Foo = <Prout 'Bug in "ReadFile" function. View field: ' e.Foo>;
}

FirstLineNumber {
  = 1;
}

StateS {
  s.LineNumber t.Err s.Symbol e.Text, <IsSpaceOrTab s.Symbol> : True =
        <StateS s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err '\n' e.Text =
        <StateS <Add s.LineNumber 1> t.Err e.Text>;
  s.LineNumber t.Err '/*' e.Text =
	<StateMultiComment s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err '*' e.Text =
	<StateComment s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err '\'' e.Text =
	<StateTextConstant s.LineNumber t.Err () e.Text>;
  s.LineNumber t.Err '"' e.Text =
	<StateSymbol s.LineNumber t.Err () e.Text>;
  s.LineNumber t.Err '$ENTRY' e.Text =
	(s.LineNumber <GetEntryType>) <StateS s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err '$EXTERN' e.Text =
	(s.LineNumber <GetExternType>) <StateS s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err '$%%%' e.Text =
	(s.LineNumber <GetDirectType>) <StateS s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err s.Delimiter e.Text, <IsDelimiter s.Delimiter> : True =
	(s.LineNumber <GetDelimType> <GetDelimCode s.Delimiter>) <StateS s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err s.Letter e.Text, <IsLetter s.Letter> : True =
	<StatePrefixEmpty s.LineNumber t.Err (s.Letter) e.Text>;
  s.LineNumber t.Err '-' e.Text =
	<StateInteger s.LineNumber t.Err ('-') e.Text>;
  s.LineNumber t.Err s.Digit e.Text, <IsDigit s.Digit> : True =
	<StateIntegerEmpty s.LineNumber t.Err (s.Digit) e.Text>;
  s.LineNumber t.Err s.Char e.Text =
        <StateS s.LineNumber <AddError t.Err (s.LineNumber IrinaError_IllegalChar s.Char)> e.Text>;
  s.LineNumber t.Err = t.Err;
  e.Foo = <Prout 'Bug in "StateS" function. View field: ' e.Foo>;
}

StateMultiComment {
  s.LineNumber t.Err '*/' e.Text = <StateS s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err '\n' e.Text = <StateMultiComment <Add s.LineNumber 1> t.Err e.Text>;
  s.LineNumber t.Err s.Char e.Text = <StateMultiComment s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err = <StateS s.LineNumber <AddError t.Err (s.LineNumber IrinaError_BadMultiComment)>>;
  e.Foo = <Prout 'Bug in "StateMultiComment" function. View field: ' e.Foo>;
}

StateComment {
  s.LineNumber t.Err '\n' e.Text = <StateS <Add s.LineNumber 1> t.Err e.Text>;
  s.LineNumber t.Err s.Char e.Text = <StateComment s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err = <StateS s.LineNumber t.Err>;
  e.Foo = <Prout 'Bug in "StateComment" function. View field: ' e.Foo>;
}

StateTextConstant {
  s.LineNumber t.Err (e.Already) '\'' e.Text =
	(s.LineNumber <GetTextConstantType> e.Already) <StateS s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err (e.Already) '\n' e.Text =
	(s.LineNumber <GetTextConstantType> e.Already)
	<StateS <Add s.LineNumber 1> <AddError t.Err (s.LineNumber IrinaError_QuoteMissing '\'')> e.Text>;
  s.LineNumber t.Err (e.Already) '\\' s.Char e.Text =
	<StateTextConstant s.LineNumber t.Err (e.Already '\\' s.Char) e.Text>;
  s.LineNumber t.Err (e.Already) '"' e.Text =
	<StateTextConstant s.LineNumber t.Err (e.Already '\\"') e.Text>;
  s.LineNumber t.Err (e.Already) s.Char e.Text =
	<StateTextConstant s.LineNumber t.Err (e.Already s.Char) e.Text>;
  s.LineNumber t.Err (e.Already) =
	<StateS s.LineNumber <AddError t.Err (s.LineNumber IrinaError_QuoteMissing '\'')>>;
  e.Foo = <Prout 'Bug in "StateTextConstant" function. View field: ' e.Foo>;
}

StateSymbol {
  s.LineNumber t.Err (e.Already) '"' e.Text =
	(s.LineNumber <GetSymbolType> e.Already) <StateS s.LineNumber t.Err e.Text>;
  s.LineNumber t.Err (e.Already) '\n' e.Text =
	(s.LineNumber <GetSymbolType> e.Already)
	<StateS <Add s.LineNumber 1> <AddError t.Err (s.LineNumber IrinaError_QuoteMissing '"')> e.Text>;
  s.LineNumber t.Err (e.Already) '\\' s.Char e.Text =
	<StateSymbol s.LineNumber t.Err (e.Already '\\' s.Char) e.Text>;
  s.LineNumber t.Err (e.Already) s.Char e.Text =
	<StateSymbol s.LineNumber t.Err (e.Already s.Char) e.Text>;
  s.LineNumber t.Err (e.Already) =
	<StateS s.LineNumber <AddError t.Err (s.LineNumber IrinaError_QuoteMissing '"')>>;
  e.Foo = <Prout 'Bug in "StateSymbol" function. View field: ' e.Foo>;
}

StatePrefixEmpty {
  s.LineNumber t.Err (e.Already) s.Letter e.Text, <IsLetter s.Letter> : True =
	<StatePrefixEmpty s.LineNumber t.Err (e.Already s.Letter) e.Text>;
  s.LineNumber t.Err (e.Already) s.Digit e.Text, <IsDigit s.Digit> : True =
	<StatePrefixEmpty s.LineNumber t.Err (e.Already s.Digit) e.Text>;
  s.LineNumber t.Err (e.Already) '.' e.Text =
	<StateSuffix s.LineNumber t.Err (e.Already '.') e.Text>;
  s.LineNumber t.Err (e.Already) e.Text =
	(s.LineNumber <GetSymbolType> e.Already) <StateS s.LineNumber t.Err e.Text>;
  e.Foo = <Prout 'Bug in "StatePrefixEmpty" function. View field: ' e.Foo>;
}

StateInteger {
  s.LineNumber t.Err (e.Already) s.Digit e.Text, <IsDigit s.Digit> : True =
	<StateIntegerEmpty s.LineNumber t.Err (e.Already s.Digit) e.Text>;
  s.LineNumber t.Err (e.Already) e.Text =
	<StateS s.LineNumber <AddError t.Err (s.LineNumber IrinaError_BadMinus)> e.Text>;
  e.Foo = <Prout 'Bug in "StateInteger" function. View field: ' e.Foo>;
}

StateIntegerEmpty {
  s.LineNumber t.Err (e.Already) s.Digit e.Text, <IsDigit s.Digit> : True =
	<StateIntegerEmpty s.LineNumber t.Err (e.Already s.Digit) e.Text>;
  s.LineNumber t.Err (e.Already) '.' e.Text =
	<StateFract s.LineNumber t.Err (e.Already '.') e.Text>;
  s.LineNumber t.Err (e.Already) e.Text =
	(s.LineNumber <GetNumberType> e.Already) <StateS s.LineNumber t.Err e.Text>;
  e.Foo = <Prout 'Bug in "StateIntegerEmpty" function. View field: ' e.Foo>;
}

StateSuffix {
  s.LineNumber t.Err (e.Already) s.Digit e.Text, <IsDigit s.Digit> : True =
	<StateNumberSuffixEmpty s.LineNumber t.Err (e.Already s.Digit) e.Text>;
  s.LineNumber t.Err (e.Already) s.Letter e.Text, <IsLetter s.Letter> : True =
	<StateIdentSuffixEmpty s.LineNumber t.Err (e.Already s.Letter) e.Text>;
  s.LineNumber t.Err (e.Already) e.Text =
	<StateS s.LineNumber <AddError t.Err (s.LineNumber IrinaError_BadSuffix e.Already)> e.Text>;
  e.Foo = <Prout 'Bug in "StateSuffix" function. View field: ' e.Foo>;
}

StateFract {
  s.LineNumber t.Err (e.Already) s.Digit e.Text, <IsDigit s.Digit> : True =
	<StateFractEmpty s.LineNumber t.Err (e.Already s.Digit) e.Text>;
  s.LineNumber t.Err (e.Already) e.Text =
	<StateS s.LineNumber <AddError t.Err (s.LineNumber IrinaError_BadFract e.Already)> e.Text>;
  e.Foo = <Prout 'Bug in "StateFract" function. View field: ' e.Foo>;
}

StateNumberSuffixEmpty {
  s.LineNumber t.Err (e.Already) s.Digit e.Text, <IsDigit s.Digit> : True =
	<StateNumberSuffixEmpty s.LineNumber t.Err (e.Already s.Digit) e.Text>;
  s.LineNumber t.Err (e.Already) e.Text =
	(s.LineNumber <GetVarType> e.Already) <StateS s.LineNumber t.Err e.Text>;
  e.Foo = <Prout 'Bug in "StateNumberSuffixEmpty" function. View field: ' e.Foo>;
}

StateIdentSuffixEmpty {
  s.LineNumber t.Err (e.Already) s.Digit e.Text, <IsDigit s.Digit> : True =
	<StateIdentSuffixEmpty s.LineNumber t.Err (e.Already s.Digit) e.Text>;
  s.LineNumber t.Err (e.Already) s.Letter e.Text, <IsLetter s.Letter> : True =
	<StateIdentSuffixEmpty s.LineNumber t.Err (e.Already s.Letter) e.Text>;
  s.LineNumber t.Err (e.Already) e.Text =
	(s.LineNumber <GetVarType> e.Already) <StateS s.LineNumber t.Err e.Text>;
  e.Foo = <Prout 'Bug in "StateIdentSuffixEmpty" function. View field: ' e.Foo>;
}

StateFractEmpty {
  s.LineNumber t.Err (e.Already) s.Digit e.Text, <IsDigit s.Digit> : True =
	<StateFractEmpty s.LineNumber t.Err (e.Already s.Digit) e.Text>;
  s.LineNumber t.Err (e.Already) e.Text =
	(s.LineNumber <GetNumberType> e.Already) <StateS s.LineNumber t.Err e.Text>;
  e.Foo = <Prout 'Bug in "StateFractEmpty" function. View field: ' e.Foo>;
}

IsSpaceOrTab {
  ' '  = True;
  '\t' = True;
  e.Foo = False;
}

IsDelimiter {
  s.Delimiter, '{}()<>=;,:': e.Foo s.Delimiter e.Bar = True;
  e.Foo = False;
}

$ENTRY IsLetter {
  s.Letter, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_': e.Foo s.Letter e.Bar = True;
  e.Foo = False;
}

$ENTRY IsDigit {
  s.Digit, '0123456789' : e.Foo s.Digit e.Bar = True;
  e.Foo = False;
}
