DEFMACRO

(DEFMACRO symb lambda-list body)

Defines a new lisp macro just like in Common Lisp with the following
differences:
  * lambda-list can't have keywords such as &aux, &rest, &key, &optional 
etc (that is, it doesn't handle them as keywords, just as symbols...)
  * lambda-list can be dotted or even be a symbol. Just like in Scheme, 
it means that the symbol after the dot is to be bound to the list of the
resting arguments given to the function. In case a symbol is placed 
instead of a list, it is bound to the whole list of the given argiments. 
  

Please note also that macros in Intelib Lisp are considered to be first 
class objects just like functions so a symbol can't have an associated 
function and an associated macro at the same time.    

